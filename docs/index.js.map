{"version":3,"sources":["select/select.js","index.js"],"names":["getTemplate","data","placeholder","selectedId","text","items","map","item","cls","id","value","join","Select","selector","options","$el","document","querySelector","event","type","target","dataset","toggle","select","close","classList","contains","find","isOpen","open","$value","textContent","current","querySelectorAll","forEach","element","remove","add","onSelect","$arrow","removeEventListener","clickHandler","innerHTML","bind","addEventListener","console","log","window","s"],"mappings":"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","file":"index.js","sourceRoot":"..","sourcesContent":["const getTemplate = (data = [], placeholder, selectedId) => {\n    let text = placeholder ?? 'Placeholder default'\n\n    const items = data.map(item => {\n        let cls = '';\n        if(item.id === selectedId) {\n            text = item.value;\n            cls = 'selected';\n        }\n        return `\n            <li class=\"select__item ${cls}\" data-type=\"item\" data-id=\"${item.id}\">${item.value}</li>\n        `\n    })\n    \n    //.join('') - приводим массив к строке\n    return `\n        <div class=\"select__backdrop\" data-type=\"backdrop\"></div>        \n        <div class=\"select__input\" data-type=\"input\">\n            <span data-type=\"value\">${text}</span>\n            <i class=\"fas fa-caret-down\" data-type=\"arrow\"></i>\n        </div>\n        <div class=\"select__dropdown\">\n            <ul class=\"select__list\">\n                ${items.join('')}\n            </ul>\n        </div>\n    `\n}\n\nexport class Select {\n    constructor(selector, options) {\n        this.$el = document.querySelector(selector);\n        this.options = options;\n        this.selectedId = options.selectedId;\n\n        this.#render();\n        this.#setup();\n    }\n\n    #render() {\n        const {placeholder, data} = this.options;\n        this.$el.classList.add('select');\n        this.$el.innerHTML = getTemplate(data, placeholder, this.selectedId);\n    }\n\n    #setup() {\n        this.clickHandler = this.clickHandler.bind(this);\n        this.$el.addEventListener('click', this.clickHandler);\n        this.$arrow = this.$el.querySelector('[data-type=\"arrow\"]');\n        this.$value = this.$el.querySelector('[data-type=\"value\"]');\n    }\n\n    clickHandler(event) {\n        const {type} = event.target.dataset;\n        \n\n        if (type === 'input' || type === 'arrow') {\n            this.toggle();\n        }\n        else if (type === 'item') {\n            const id = event.target.dataset.id\n            this.select(id);\n        }\n        else if (type === 'backdrop') {\n            this.close();\n        }\n    }\n\n\n    get isOpen() {\n        return this.$el.classList.contains('open');\n    }\n\n    get current() {\n        return this.options.data.find(item => item.id === this.selectedId)\n    }\n\n    toggle() {\n        this.isOpen ? this.close() : this.open();\n    }\n    \n    select(id) {\n        this.selectedId = id;\n        this.$value.textContent = this.current.value;\n\n        this.$el.querySelectorAll('[data-type=\"item\"]').forEach(element => {\n            element.classList.remove('selected');\n        });\n        this.$el.querySelector(`[data-id=\"${id}\"]`).classList.add('selected')\n\n        this.options.onSelect ? this.options.onSelect(this.current) : null;\n\n        this.close();\n    }\n\n    open() {\n        this.$el.classList.add('open');\n        this.$arrow.classList.remove('fa-caret-down');\n        this.$arrow.classList.add('fa-caret-up');\n    }\n\n    close() {\n        this.$el.classList.remove('open');\n        this.$arrow.classList.remove('fa-caret-up');\n        this.$arrow.classList.add('fa-caret-down');\n    }\n\n    destroy() {\n        this.$el.removeEventListener('click', this.clickHandler);\n        this.$el.innerHTML = '';\n    }\n}","import {Select} from './select/select';\nimport './select/style.scss';\n\n\nconst select = new Select('#select', {\n    placeholder: 'Choose me',\n    selectedId: '1',\n    data: [\n        {id: '1', value: 'Бутик на Невском 103'},\n        {id: '2', value: 'Новокузнечный переулок 4/1'},\n        {id: '3', value: 'Московский проспект 14'},\n        {id: '4', value: 'Бутик на  Лиговском 89'},\n        {id: '5', value: 'улица Рубинштейна 32'},\n        {id: '6', value: 'Кронверкский проспект 57'},\n    ],\n    onSelect(item) {\n        console.log('Selected Item', item);\n    }\n})\n\nwindow.s = select;"]}